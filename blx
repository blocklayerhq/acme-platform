#!/bin/bash

set -eu

blx() {
	cmd=${1:-}; subcmd=${2:-}; shift 2 || true
	
	cuecmd() {
		cmd="${1:-main}"
		tmp="$(mktemp -d)"
		echo --- cuecmd --- $tmp
		cat > "$tmp/main_tool.cue"
		ln -s "$tmp/main_tool.cue" "$tmp/main_tool_.cue"
		cue vet "$tmp/*.cue"
		cue cmd "$cmd" "$tmp/*.cue"
	}
	
	case $cmd in
	
		env) case $subcmd in
	
				"")
					cat <<-EOF
						Usage: blx env COMMAND
						
						Manage Blocklayer staging environments
						
						    stage          Submit changes to deploy in an environment
						    deploy         Deploy all staged changes for an environment
						
						    list           Show a list of environments
						    configure      Change the configuration of an environment
						    components     Show a list of components installed on an environment
						    create         Create a new environment
						    inspect        Show information on an environment
						    update         Update an environment to the latest components and blueprint
						    destroy        Destroy an environment and its components
					EOF
				;;

				list)
					ls .bl/env | cat
				;;
	
				inspect)
					cue eval "$(envdir $@)/*.cue"
				;;
	
				create)
					name="${1:?unspecified name}"
					mkdir -p .bl/env
					if [ -e .bl/env/"$name" ]; then
						echo >&2 "Env $name already exists"
						return 1
					fi
					mkdir .bl/env/"$name"
					cat <<-EOF > .bl/env/"$name"/nameid.cue
					    env "$name": {
						    name: "$name"
					    }
					EOF
				islandCompile
				;;

				# alt. deploy
				# Deploy current outputs to their respective targets
				push) ;;
	
				# Process inputs and produce new outputs for deployment
				stage) ;;
	
				# Fetch data from remote sources and update inputs
				pull) ;;
				components) ;;
	
				update) ;;
	
				configure) ;;
	
	#				data) ;;
	#
	#					in) ;;
	#
	#					out) ;;
	#
	#					private) ;;
	#
	#				code) ;;
	#
	#				settings) ;;
	#
	#				target) ;;
	#
	#				keychain) ;;
	
				destroy)
					env="${1:?unspecified env name}"
					rm -fr .bl/env/"$env"
					islandCompile
				;;
	
			esac ;;
	
	
		component) case $subcmd in
	
				"")
					cat <<-EOF
						Usage: blx component COMMAND
						
						Manage individual components of a staging environment
						
						    list            Show a list of installed components
						    inspect         Show information on an installed component
						    search          Search the catalog of available components
						    install         Install a new component in an environment
						    update          Update an installed component
						    configure       Change the configuration of an installed component
						    remove          Remove a component from an environment
					EOF
				;;

				list)
					echo "ENV		BLOCK"
					ls .bl/env | {
						while read env; do
							ls "$(envdir $env)/components" 2>/dev/null | {
								while read componentName; do
									echo "$env		$componentName"
								done
							}
						done
					}
				;;
		
				inspect) ;;
		
				search)
					(
						cd .bl/catalog/components 2>/dev/null || {
							echo >&2 "component catalog not available. Your blx install may be broken"
							return 1
						}
						find -type d *
					)
				;;
		
				install)
					env="${1:?unspecified env name}"
					component="${2:?unspecified component name}"
					componentSource="${3:?unspecified component source}"

					# Env must exist
					if [ ! -e "$(envdir $env)" ]; then
						echo >&2 "No such env: $env"
						return 1
					fi
					
					# Component must not exist
					dir="$(componentdir $env $component)"
					if [ -e "$dir" ]; then
						echo >&2 "Block '$componentName' already installed in env '$env'"
						return 1
					fi
					mkdir =p "$dir"

					# Create template component
					componentConfig=$(mktemp)
					cat >"$componentConfig" <<-EOF
						env $env components "$componentName": {
						    blueprint: "$componentSource"

						    settings: {
							    // Env-specific component settings here
						    }
						}
					EOF
					"${EDITOR:-vim}" "$componentConfig"
					mkdir "$componentPath"
					mv "$componentConfig" "$componentPath/config.cue"
					islandCompile
				;;

		
				update) ;;
		
				configure)
					env="${1:?unspecified env name}"
					component="${2:?unspecified component name}"

					# Copy component to temporary sandbox
					dir="$(componentdir $env $component)"
					userConfig="$dir/configure.cue"
					tmp="$(mktemp)"
					if [ -e "$userConfig" ]; then
						cp "$userConfig" "$tmp"
					fi
					"${EDITOR:-vim}" "$tmp"
					mv "$tmp" "$userConfig"
					islandCompile
				;;
						
				remove)
					env="${1:?unspecified env name}"
					component="${2:?unspecified component name}"

					# Env must exist
					if [ ! -e "$(envdir $env)" ]; then
						echo >&2 "No such env: $env"
						return 1
					fi
					# Component must exist
					dir="$(componentdir $env $component)"
					if [ ! -e "$dir" ]; then
						echo >&2 "No such component '$component' in env '$env'"
						return 1
					fi
					rm -fr "$dir"
					islandCompile
				;;
		esac ;;

		"")
			cat <<-EOF
			    blx: experimental blocklayer CLI

			    Usage: blx [OPTIONS] COMMAND [ARGS...]

				    env			Manage staging environments
				    component	Manage the individual components of an environment
				    island		Manage the infrastructure running environments
				EOF
			return
		;;

		island)

			case "$subcmd" in

				"")
					cat <<-EOF
						blx island: manage the infrastructure running staging environments

						Usage: blx island [OPTIONS] COMMAND [ARGS...]

						    install     Install an island on the local machine
						    update      Update the island on the local machine
						    destroy     Destroy the island on the local machine, with all its data
						EOF
				;;

				install)
					if [ -e .bl ]; then
						echo >&2 "Island already installed on local machine"
						return 1
					fi
					mkdir .bl
					blx island update "$@"
				;;

				update)
					# Do our best to "migrate" an incomplete install when possible
					mkdir -p \
						.bl \
						.bl/engine \
						.bl/env
					# Install latest engine code
					cat <<-EOF > .bl/engine/api.cue
						engine: {
							version: [0, 0, 3]
							channel: "alpha"
						}

						env <envName>: {
							name: envName
							target: string
							settings <K>: _
							keychain <K>: _

							component <componentName>: {
								// 1. To be completed by env operator
								blueprint?: string
								target: *env.target|string
								settings <K>: _
								auth?: _
								input: {
									from: string
									fromDir: string
									toDir: string
								}
								remotes: {
									pullFrom: _
									pushTo: _
								}

								// 2. To be completed by component author
								actions: {
									install?: string
									remove?: string
									pull?: string
									package?: string
									push?: string
								}
								info <K>: _

								// 3. Helpers provided by the engine

								// Helpers
								name: componentName
								slug: strings.Replace(strings.Replace(target, ".", "-", -1), "_", "-", -1)
							}
						}
						EOF
					islandCompile
				;;

				inspect)
					islandCompile
					(cd .bl/compiled && cue eval *.cue */*.cue */*/*.cue)
				;;

				destroy)
					rm -fr .bl
				;;

				*)
					echo >&2 No such command: $cmd $subcmd
					return 1
				;;

			esac ;;

		*)
			echo >&2 No such command: $cmd
			return 1
		;;
	
	esac
}

islandCompile() {
	package=${1:-bl}
	compileDir=$(mktemp -d)
	(
		cd .bl && find engine env -name '*.cue'
	) | {
		while read -r cuePath; do
			mkdir -p "$compileDir/$(dirname $cuePath)"
			{
				echo package $package
				cat ".bl/$cuePath"
			} > "$compileDir/$cuePath"
		done
		echo package $package > "$compileDir/$cuePath/root.cue"
	}
	(cd "$compileDir" && cue vet ./...)
	cp -a "$compileDir/" .bl/compiled/
}


envdir() {
	env="${1:?unspecified env name}"
	echo ".bl/env/$env"
}

componentdir() {
	env="${1:?unspecified env name}"
	component="${2:?unspecified component name}"
	echo "$(envdir $env)/components/$component"
}


blx "$@"
